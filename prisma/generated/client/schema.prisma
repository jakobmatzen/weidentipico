generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model users {
  id                              Int           @id @default(autoincrement())
  name                            String
  username                        String
  password                        String
  role                            Int?
  betEntries                      betEntries[]
  tradeOffers                     tradeOffers[]
  trades_trades_customerIdTousers trades[]      @relation("trades_customerIdTousers")
  trades_trades_supplierIdTousers trades[]      @relation("trades_supplierIdTousers")
  userWallets                     userWallets?
  roles                           roles?        @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model bets {
  id                         Int          @id @default(autoincrement())
  description                String
  createdAt                  DateTime     @default(now()) @db.Timestamptz(6)
  deadlineAt                 DateTime     @db.Timestamptz(6)
  status                     Int?
  participants               Int          @default(0)
  amount                     Int          @default(0)
  betOptions                 betOptions[]
  status_bets_statusTostatus status?      @relation("bets_statusTostatus", fields: [status], references: [id], onDelete: Restrict)
}

model roles {
  id          Int     @id @default(autoincrement())
  description String
  users       users[]
}

model services {
  id          Int    @id @default(autoincrement())
  description String
}

model status {
  id                       Int    @id @default(autoincrement())
  description              String
  bets_bets_statusTostatus bets[] @relation("bets_statusTostatus")
}

model tradeOffers {
  id         BigInt   @id @default(autoincrement())
  tradeId    Int?
  userId     Int?
  value      Int
  isAccepted Boolean?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  trades     trades?  @relation(fields: [tradeId], references: [id], onDelete: Restrict)
  users      users?   @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model trades {
  id                             Int           @id @default(autoincrement())
  supplierId                     Int?
  customerId                     Int?
  service                        String?
  createdAt                      DateTime      @default(now()) @db.Timestamptz(6)
  deadlineAt                     DateTime?     @db.Timestamptz(6)
  tradedAt                       DateTime?     @db.Timestamptz(6)
  tradeOffers                    tradeOffers[]
  users_trades_customerIdTousers users?        @relation("trades_customerIdTousers", fields: [customerId], references: [id], onDelete: Restrict)
  users_trades_supplierIdTousers users?        @relation("trades_supplierIdTousers", fields: [supplierId], references: [id], onDelete: Restrict)
}

model userWallets {
  id      Int   @id @default(autoincrement())
  balance Int   @default(0)
  users   users @relation(fields: [id], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model betEntries {
  id         Int         @id @default(autoincrement())
  optionId   Int?
  userId     Int?
  amount     Int
  isWinner   Boolean     @default(false)
  betOptions betOptions? @relation(fields: [optionId], references: [id], onDelete: Restrict)
  users      users?      @relation(fields: [userId], references: [id], onDelete: Restrict)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model betOptions {
  id          Int          @id(map: "betDetails_pkey") @default(autoincrement())
  betId       Int?
  description String
  amount      Int
  isWinner    Boolean      @default(false)
  quote       Float        @db.Real
  betEntries  betEntries[]
  bets        bets?        @relation(fields: [betId], references: [id], onDelete: Restrict, map: "betDetails_betId_fkey")
}
